// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Realm {
  id            String         @id @default(uuid())
  name          String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?
  categories    Category[]
  wallets       Wallet[]
  targets       Target[]
  transactions  Transaction[]
  notifications Notification[]
  preferences   Preference[]

  @@map("realms")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  cell_phone    String?
  first_name    String
  last_name     String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?
  categories    Category[]
  wallets       Wallet[]
  targets       Target[]
  transactions  Transaction[]
  notifications Notification[]
  preference    Preference?

  @@map("users")
}

model UserRealm {
  user_id    String
  realm_id   String
  created_at DateTime @default(now())

  @@id([user_id, realm_id])
  @@map("users_on_realms")
}

model Preference {
  id         String              @id @default(uuid())
  theme      ThemePreferences    @default(LIGHT)
  language   LanguagePreferences @default(PT_BR)
  currency   CurrencyPreferences @default(BRL)
  user_id    String              @unique
  user       User                @relation(fields: [user_id], references: [id])
  realm_id   String
  realm      Realm               @relation(fields: [realm_id], references: [id])
  created_at DateTime            @default(now())
  updated_at DateTime            @updatedAt

  @@map("preferences")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  code         String?
  realm_id     String?
  realm        Realm?        @relation(fields: [realm_id], references: [id])
  author_id    String?
  author       User?         @relation(fields: [author_id], references: [id])
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  deleted_at   DateTime?
  parent_id    String?
  parent       Category?     @relation("CategoryToCategory", fields: [parent_id], references: [id])
  childrens    Category[]    @relation("CategoryToCategory")
  transactions Transaction[]

  @@map("categories")
}

model Wallet {
  id                  String              @id @default(uuid())
  name                String
  description         String?
  type                TypeWallet          @default(OTHER)
  realm_id            String?
  realm               Realm?              @relation(fields: [realm_id], references: [id])
  author_id           String?
  author              User?               @relation(fields: [author_id], references: [id])
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?
  target              Target?
  transactions        Transaction[]
  transaction_wallets TransactionWallet[]

  @@map("wallets")
}

model Target {
  id          String    @id @default(uuid())
  name        String
  description String?
  amount      Float     @default(0)
  wallet_id   String    @unique
  wallet      Wallet    @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  realm_id    String?
  realm       Realm?    @relation(fields: [realm_id], references: [id])
  author_id   String?
  author      User?     @relation(fields: [author_id], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("targets")
}

model Transaction {
  id                  String              @id @default(uuid())
  name                String
  description         String?
  type                TypeTransaction
  amount              Float               @default(0)
  date                DateTime
  status              StatusTransaction   @default(PENDING)
  category_id         String
  category            Category            @relation(fields: [category_id], references: [id])
  wallet_id           String
  wallet              Wallet              @relation(fields: [wallet_id], references: [id])
  author_id           String
  author              User                @relation(fields: [author_id], references: [id])
  realm_id            String
  realm               Realm               @relation(fields: [realm_id], references: [id])
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?
  obs                 String?
  transaction_wallets TransactionWallet[]

  @@map("transactions")
}

model TransactionWallet {
  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  wallet_id      String
  wallet         Wallet      @relation(fields: [wallet_id], references: [id])
  created_at     DateTime    @default(now())

  @@id([transaction_id, wallet_id])
  @@map("transactions_on_wallets")
}

model Notification {
  id          String             @id @default(uuid())
  type        TypeNotification   @default(TRANSACTION)
  title       String
  description String?
  status      StatusNotification @default(PENDING)
  user_id     String
  user        User               @relation(fields: [user_id], references: [id])
  realm_id    String
  realm       Realm              @relation(fields: [realm_id], references: [id])
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt

  @@map("notifications")
}

enum TypeTransaction {
  INCOME
  EXPENSE
  TRANSFER
}

enum ThemePreferences {
  LIGHT
  DARK
}

enum LanguagePreferences {
  PT_BR
  EN_US
}

enum CurrencyPreferences {
  BRL
  USD
}

enum TypeWallet {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  SAVINGS
  TARGET
  OTHER
}

enum TypeNotification {
  TRANSACTION
  TARGET
}

enum StatusNotification {
  PENDING
  READ
}

enum StatusTransaction {
  PENDING
  CONCLUDED
  CANCELED
}
