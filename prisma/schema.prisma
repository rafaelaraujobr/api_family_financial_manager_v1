// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Realm {
  id           String        @id @default(uuid())
  name         String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  categories   Category[]
  wallets      Wallet[]
  targets      Target[]
  transactions Transaction[]

  @@map("realms")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  cell_phone   String
  first_name   String
  last_name    String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  categories   Category[]
  wallets      Wallet[]
  target       Target[]
  transactions Transaction[]

  @@map("users")
}

model UserRealm {
  user_id    String
  realm_id   String
  created_at DateTime @default(now())

  @@id([user_id, realm_id])
  @@map("user_realms")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  description  String?
  code         String?
  realm_id     String?
  realm        Realm?        @relation(fields: [realm_id], references: [id])
  author_id    String?
  author       User?         @relation(fields: [author_id], references: [id])
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  parent_id    String?
  parent       Category?     @relation("CategoryToCategory", fields: [parent_id], references: [id])
  childrens    Category[]    @relation("CategoryToCategory")
  transactions Transaction[]

  @@map("categories")
}

model Wallet {
  id           String        @id @default(uuid())
  name         String
  realm_id     String
  realm        Realm         @relation(fields: [realm_id], references: [id])
  author_id    String
  author       User          @relation(fields: [author_id], references: [id])
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  targets      Target[]
  transactions Transaction[]

  @@map("wallets")
}

model Target {
  id          String   @id @default(uuid())
  name        String
  description String?
  amount      Float
  wallet_id   String
  wallet      Wallet   @relation(fields: [wallet_id], references: [id])
  realm_id    String
  realm       Realm    @relation(fields: [realm_id], references: [id])
  author_id   String
  author      User     @relation(fields: [author_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("targets")
}

model Transaction {
  id          String            @id @default(uuid())
  name        String
  description String?
  amount      Float
  date        DateTime
  status      StatusTransaction @default(PENDING)
  category_id String
  category    Category          @relation(fields: [category_id], references: [id])
  wallet_id   String
  wallet      Wallet            @relation(fields: [wallet_id], references: [id])
  author_id   String
  author      User              @relation(fields: [author_id], references: [id])
  realm_id    String
  realm       Realm             @relation(fields: [realm_id], references: [id])
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt

  @@map("transactions")
}

enum StatusTransaction {
  PENDING
  CONCLUDED
  CANCELED
}
