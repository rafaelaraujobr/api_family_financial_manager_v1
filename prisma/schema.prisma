// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator erd {
//   provider                  = "prisma-erd-generator"
//   output                    = "../docs/erd.svg"
//   theme                     = "dark"
//   includeRelationFromFields = true
//   erdDebug                  = true
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            String         @id @default(uuid())
  name          String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?
  wallets       Wallet[]
  targets       Target[]
  transactions  Transaction[]
  notifications Notification[]
  preferences   Preference[]
  users         UserOnTenant[]
  groups        Group[]

  @@map("tenants")
}

model User {
  id            String             @id @default(uuid())
  email         String             @unique
  password      String
  first_name    String
  last_name     String
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  deleted_at    DateTime?
  wallets       Wallet[]
  targets       Target[]
  transactions  Transaction[]
  notifications Notification[]
  preference    Preference?
  tenants       UserOnTenant[]
  groups        UserOnGroup[]
  permissions   UserOnPermission[]

  @@map("users")
}

model UserOnTenant {
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  tenant_id  String
  tenant     Tenant   @relation(fields: [tenant_id], references: [id])
  created_at DateTime @default(now())
  role_id    String
  role       Role     @relation(fields: [role_id], references: [id])

  @@id([user_id, tenant_id])
  @@map("users_on_realms")
}

model Role {
  id          String             @id @default(uuid())
  name        String
  slug        String             @unique
  description String?
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  deleted_at  DateTime?
  users       UserOnTenant[]
  permissions RoleOnPermission[]

  @@map("roles")
}

model Group {
  id          String              @id @default(uuid())
  name        String
  description String?
  tenant_id   String
  tenant      Tenant              @relation(fields: [tenant_id], references: [id])
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  deleted_at  DateTime?
  permissions GroupOnPermission[]
  UserOnGroup UserOnGroup[]

  @@map("groups")
}

model GroupOnPermission {
  group_id      String
  group         Group      @relation(fields: [group_id], references: [id])
  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id])
  created_at    DateTime   @default(now())

  @@id([group_id, permission_id])
  @@map("groups_on_permissions")
}

model UserOnGroup {
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  group_id   String
  group      Group    @relation(fields: [group_id], references: [id])
  created_at DateTime @default(now())

  @@id([user_id, group_id])
  @@map("users_on_groups")
}

model UserOnPermission {
  user_id       String
  user          User       @relation(fields: [user_id], references: [id])
  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id])
  created_at    DateTime   @default(now())

  @@id([user_id, permission_id])
  @@map("users_on_permissions")
}

model Permission {
  id          String              @id @default(uuid())
  name        String
  description String?
  action      String
  entity      String
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  deleted_at  DateTime?
  groups      GroupOnPermission[]
  roles       RoleOnPermission[]
  users       UserOnPermission[]

  @@unique([action, entity])
  @@map("permissions")
}

model RoleOnPermission {
  role_id       String
  role          Role       @relation(fields: [role_id], references: [id])
  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id])
  created_at    DateTime   @default(now())

  @@id([role_id, permission_id])
  @@map("roles_on_permissions")
}

model Preference {
  id          String              @id @default(uuid())
  user_id     String              @unique
  user        User                @relation(fields: [user_id], references: [id])
  theme       ThemePreferences    @default(LIGHT)
  language    LanguagePreferences @default(PT_BR)
  currency    CurrencyPreferences @default(BRL)
  wallet_id   String?
  main_wallet Wallet?             @relation(fields: [wallet_id], references: [id])
  tenant_id   String
  main_tenant Tenant              @relation(fields: [tenant_id], references: [id])
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt

  @@map("preferences")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  code         String?
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  deleted_at   DateTime?
  parent_id    String?
  parent       Category?     @relation("CategoryToCategory", fields: [parent_id], references: [id])
  childrens    Category[]    @relation("CategoryToCategory")
  transactions Transaction[]

  @@map("categories")
}

model Wallet {
  id           String        @id @default(uuid())
  name         String
  description  String?
  type         TypeWallet    @default(OTHER)
  tenant_id    String?
  tenant       Tenant?       @relation(fields: [tenant_id], references: [id])
  author_id    String?
  is_notified  Boolean       @default(false)
  author       User?         @relation(fields: [author_id], references: [id])
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?
  target       Target?
  transactions Transaction[]
  preferences  Preference[]

  @@unique([name, tenant_id])
  @@map("wallets")
}

model Target {
  id          String    @id @default(uuid())
  name        String
  description String?
  amount      Float     @default(0)
  wallet_id   String    @unique
  wallet      Wallet    @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  tenant_id   String?
  tenant      Tenant?   @relation(fields: [tenant_id], references: [id])
  author_id   String?
  author      User?     @relation(fields: [author_id], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("targets")
}

model Transaction {
  id                  String               @id @default(uuid())
  name                String
  description         String?
  type                TypeTransaction
  amount              Float                @default(0.01)
  date                DateTime
  status              StatusTransaction    @default(PENDING)
  category_id         String
  category            Category             @relation(fields: [category_id], references: [id])
  wallet_id           String
  wallet              Wallet               @relation(fields: [wallet_id], references: [id])
  author_id           String?
  author              User?                @relation(fields: [author_id], references: [id])
  tenant_id           String?
  tenant              Tenant?              @relation(fields: [tenant_id], references: [id])
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  deleted_at          DateTime?
  transaction_expense TransferTransaction? @relation("transaction_expense")
  transaction_income  TransferTransaction? @relation("transaction_income")

  @@map("transactions")
}

model TransferTransaction {
  transaction_expense_id String      @unique
  transaction_expense    Transaction @relation("transaction_expense", fields: [transaction_expense_id], references: [id], onDelete: Cascade)
  transaction_income_id  String      @unique
  transaction_income     Transaction @relation("transaction_income", fields: [transaction_income_id], references: [id], onDelete: Cascade)
  created_at             DateTime    @default(now())

  @@unique([transaction_expense_id, transaction_income_id])
}

model Notification {
  id          String             @id @default(uuid())
  type        TypeNotification   @default(TRANSACTION)
  title       String
  description String?
  status      StatusNotification @default(PENDING)
  user_id     String
  payload     String?
  user        User               @relation(fields: [user_id], references: [id])
  tenant_id   String
  tenant      Tenant             @relation(fields: [tenant_id], references: [id])
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt

  @@map("notifications")
}

enum TypeTransaction {
  INCOME
  EXPENSE
  TRANSFER
}

enum ThemePreferences {
  LIGHT
  DARK
}

enum LanguagePreferences {
  PT_BR
  EN_US
}

enum CurrencyPreferences {
  BRL
  USD
}

enum TypeWallet {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  SAVINGS
  TARGET
  OTHER
}

enum TypeNotification {
  TRANSACTION
  TARGET
}

enum StatusNotification {
  PENDING
  READ
}

enum StatusTransaction {
  PENDING
  CONCLUDED
}
